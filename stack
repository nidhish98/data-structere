creating a data structere 
stack
#include <stdio.h>
#include <stdlib.h>
//stack using array
#include <stdio.h>
#include <stdlib.h>
struct stack{        //creating a data structere stack. using array
    int size;
    int top;
int *arr; //pointer w
}; 
int isfull(struct stack *ptr){
    if(ptr->top==ptr->size-1){
        return 1;
    }
    else{
        return 0;
    }
}
int isempty(struct stack *ptr){
    if(ptr->top==-1){
        return 1;
    }
    else{
        return 0;
    }
    
}
void push(struct stack *ptr) {  //push only if it is not full
  if(isfull(ptr)!=1){      //not full
     
      int value;
      printf("enter value\n");
      scanf("%d",&value);
      ptr->top=ptr->top+1;
      ptr->arr[ptr->top]=value;
      ;
  }}
  void pop(struct stack *ptr){
      if(isempty(ptr)!=1){
          
          printf("no popped is %d\n",ptr->arr[ptr->top]);
          ptr->top=ptr->top-1;
          
          
      }
  }
  void peak(struct stack *ptr){
      for(int i=ptr->top;i>=0;i--){
          printf("%d\n",ptr->arr[i]);
      }
  }
  

    

int main()
{
  struct stack *ptr=(struct stack*) malloc(sizeof(struct stack)); //dynamically allocate ptr which will take memory for 3 datatypes.
   ptr->size=4;
   ptr->top=-1;
   ptr->arr=(int *)malloc(ptr->size*(sizeof(int)));
   
  
   push(ptr);
   push(ptr);
   push(ptr);
   push(ptr);
   pop(ptr);
   peak(ptr);
    printf(" %dthe stack top",ptr->arr[ptr->top]);
    return 0;}
implementing stack using LL 
#include <stdio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node *link;
};

struct node* push(int dataa,struct node *top){
    struct node *first=malloc(sizeof(struct node));
    first->data=dataa;
    first->link=top;
    top=first;
    return top;
}
struct node* pop(struct node *top){
    if(top==NULL){
        printf("stack empty");
    }
    struct node *temp=malloc(sizeof(struct node));
    int x=top->data;
    printf("%d is getting removed from stack\n",x);
    temp=top;
   top=temp->link;
    free(temp);
    return top;
}
void traverse(struct node *top)
{
    while(top!=NULL){
       
        printf("%d\n",top->data);
         top=top->link;
    }
}

int main(){
    struct node *top=malloc(sizeof(struct node));
    top->data=12;
    top->link=NULL;
    top=push(133,top);
    traverse(top);
    top=pop(top);
    traverse(top);
}

valid parenthessis matching #include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100

struct stack {
    int top;
    char arr[MAX];
};

int isfull(struct stack *s) {
    return s->top == MAX - 1;
}

int isempty(struct stack *s) { 
    return s->top == -1;
}

void push(char a, struct stack *s) {
    if (isfull(s)) {
        printf("Stack overflow\n");
        return;
    }
    s->arr[++s->top] = a;
}

char pop(struct stack *s) {
    if (isempty(s)) {
        printf("Stack underflow\n");
        return '\0'; // Return a null character if the stack is empty
    }
    return s->arr[s->top--]; // Return the top element and decrement
}

char peek(struct stack *s) {
    if (!isempty(s)) {
        return s->arr[s->top];
    }
    return '\0'; // Return a null character if the stack is empty
}

int main() {
    struct stack *st = malloc(sizeof(struct stack));
    st->top = -1;
    char arr[50] = "([A+B])";
    int n = strlen(arr);

    for (int i = 0; i < n; i++) {
        if (arr[i] == '(' || arr[i] == '[' || arr[i] == '{') {
            push(arr[i], st);
        } else if ((arr[i] >= 'a' && arr[i] <= 'z') || (arr[i] >= 'A' && arr[i] <= 'Z')) {
            continue;
        } else if (arr[i] == ')' || arr[i] == ']' || arr[i] == '}') {
            if (isempty(st)) {
                printf("wrong\n");
                free(st); // Free allocated memory before exiting
                return 0;
            }
            char p = pop(st);
            if ((p == '(' && arr[i] != ')') || 
                (p == '[' && arr[i] != ']') || 
                (p == '{' && arr[i] != '}')) {
                printf("wrong\n");
                free(st); // Free allocated memory before exiting
                return 0;
            }
        }
    }
    if (!isempty(st)) {
        printf("wrong\n"); // Check if stack is not empty at the end
    } else {
        printf("correct\n");
    }

    free(st); // Free allocated memory
    return 0;
}
INFIX TO POSTFIX 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

char stack[MAX];
char infix[MAX], postfix[MAX];
int top = -1;

void push(char c);
char pop();
int isEmpty();
void inToPost();
void print();
int precedence(char symbol);

int main()
{
    printf("Enter the infix expression: ");
    fgets(infix, MAX, stdin);
    // Remove newline character from the input
    infix[strcspn(infix, "\n")] = '\0';

    inToPost();
    print();

    return 0;
}

void inToPost()
{
    int i, j = 0;
    char symbol, next;

    for (i = 0; i < strlen(infix); i++)
    {
        symbol = infix[i];

        if (symbol == '(')
        {
            push(symbol);
        }
        else if (symbol == ')')
        {
            while (!isEmpty() && (next = pop()) != '(')
                postfix[j++] = next;
            // Check if there is an unmatched opening parenthesis
            if (isEmpty())
            {
                printf("Error: Unmatched parentheses\n");
                exit(1);
            }
        }
        else if (symbol == '+' || symbol == '-' || symbol == '*' || symbol == '/' || symbol == '^')
        {
            while (!isEmpty() && precedence(stack[top]) >= precedence(symbol))
                postfix[j++] = pop();
            push(symbol);
        }
        else
        {
            // Assumption: Input contains valid operands (alphanumeric)
            if (isalnum(symbol))
                postfix[j++] = symbol;
        }
    }

    while (!isEmpty())
        postfix[j++] = pop();
    postfix[j] = '\0';
}

int precedence(char symbol)
{
    switch (symbol)
    {
    case '^':
        return 3;
    case '*':
    case '/':
        return 2;
    case '+':
    case '-':
        return 1;
    default:
        return 0;
    }
}

void print()
{
    printf("The equivalent postfix expression is: %s\n", postfix);
}

void push(char c)
{
    if (top == MAX - 1)
    {
        printf("Stack Overflow\n");
        exit(1);
    }
    stack[++top] = c;
}

char pop()
{
    if (top == -1)
    {
        printf("Stack Underflow\n");
        exit(1);
    }
    return stack[top--];
}

int isEmpty()
{
    return top == -1;
}

