#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX 100 // Maximum number of elements in the stack

// Define a global stack array and top variable
struct Node* stack[MAX];
int top = -1;

// Define a structure for tree nodes
struct Node {
    char data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new tree node
struct Node* createNode(char data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to push a node onto the stack
void push(struct Node* node) {
    if (top == MAX - 1) {
        printf("Stack overflow\n");
        return;
    }
    stack[++top] = node;
}

// Function to pop a node from the stack
struct Node* pop() {
    if (top == -1) {
        printf("Stack underflow\n");
        return NULL;
    }
    return stack[top--];
}

// Function to construct a binary expression tree from a postfix expression
struct Node* constructExpressionTree(char* postfix) {
    for (int i = 0; postfix[i] != '\0'; i++) {
        // If the character is an operand, create a node and push it onto the stack
        if (isalnum(postfix[i])) {
            struct Node* newNode = createNode(postfix[i]);
            push(newNode);
        }
        // If the character is an operator, pop two nodes, create a new node, and push it back
        else {
            struct Node* newNode = createNode(postfix[i]);

            // Pop two nodes for the right and left children
            newNode->right = pop();
            newNode->left = pop();

            // Push the new operator node onto the stack
            push(newNode);
        }
    }

    // The last remaining node on the stack is the root of the expression tree
    return pop();
}

// Function to perform an inorder traversal of the tree
void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%c ", root->data);
        inorderTraversal(root->right);
    }
}

// Main function
int main() {
    char postfix[] = "ab+c*";

    // Construct the expression tree
    struct Node* root = constructExpressionTree(postfix);

    // Perform inorder traversal to display the expression
    printf("Inorder Traversal of the Expression Tree: ");
    inorderTraversal(root);
    printf("\n");

    return 0;
}

